# main.py
from fastapi import FastAPI, Body
from agents import LearningAgents
from crewai import Crew, Process
import json

app = FastAPI()
learning_agents = LearningAgents()

@app.post("/recommendations/")
async def get_learning_recommendations(user_input: str = Body(embed=True)):
    """
    Receives user input and returns learning resource recommendations.
    """
    # Define tasks
    interest_analysis_task = learning_agents.define_interest_analysis_task(user_input)
    resource_search_task = learning_agents.define_resource_search_task("user interests summary") # The actual summary will be generated by the crew
    resource_evaluation_task = learning_agents.define_resource_evaluation_task("list of resources") # The actual resources will be found by the crew
    recommendation_task = learning_agents.define_recommendation_task("evaluated resources") # The actual evaluations will be done by the crew

    # Create the crew
    learning_crew = Crew(
        agents=[
            learning_agents.interest_analyzer_agent(),
            learning_agents.resource_searcher_agent(),
            learning_agents.resource_evaluator_agent(),
            learning_agents.recommendation_agent()
        ],
        tasks=[
            interest_analysis_task,
            resource_search_task,
            resource_evaluation_task,
            recommendation_task
        ],
        process=Process.sequential,
        verbose=True
    )

    # Run the crew
    result = learning_crew.kickoff()

    # Find the output of the recommendation task
    recommendations_output = None
    for task in learning_crew.tasks:
        if task.description.startswith("Compile a personalized list of learning resources"):
            recommendations_output = task.output
            break

    # Process the raw output into a structured format
    structured_recommendations = []
    if recommendations_output:
        resources = recommendations_output.split("\n\n")
        for resource in resources:
            if resource.strip():
                lines = resource.split("\n")
                recommendation = {}
                for line in lines:
                    if line.startswith(("1.", "2.", "3.", "4.", "5.")):
                        recommendation['title'] = line.split(".", 1)[1].strip()
                    elif line.strip().startswith("* Description:"):
                        recommendation['description'] = line.split(":", 1)[1].strip()
                    elif line.strip().startswith("* Link:"):
                        recommendation['link'] = line.split(":", 1)[1].strip()
                    elif line.strip().startswith("* Rating:"):
                        recommendation['rating'] = line.split(":", 1)[1].strip()
                    elif line.strip().startswith("* Justification:"):
                        recommendation['justification'] = line.split(":", 1)[1].strip()
                if recommendation.get('title') and recommendation.get('link'):
                    structured_recommendations.append(recommendation)

    return {"recommendations": structured_recommendations}