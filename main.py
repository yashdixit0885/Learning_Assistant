# main.py
from fastapi import FastAPI, Body
from agents import LearningAgents
from crewai import Crew, Process
import json

app = FastAPI()
learning_agents = LearningAgents()

@app.post("/recommendations/")
async def get_learning_recommendations(user_input: str = Body(embed=True)):
    """
    Receives user input and returns learning resource recommendations.
    """
    # Define tasks
    interest_analysis_task = learning_agents.define_interest_analysis_task(user_input)
    resource_search_task = learning_agents.define_resource_search_task("user interests summary") # The actual summary will be generated by the crew
    resource_evaluation_task = learning_agents.define_resource_evaluation_task("list of resources") # The actual resources will be found by the crew
    recommendation_task = learning_agents.define_recommendation_task("evaluated resources") # The actual evaluations will be done by the crew

    # Create the crew
    learning_crew = Crew(
        agents=[
            learning_agents.interest_analyzer_agent(),
            learning_agents.resource_searcher_agent(),
            learning_agents.resource_evaluator_agent(),
            learning_agents.recommendation_agent()
        ],
        tasks=[
            interest_analysis_task,
            resource_search_task,
            resource_evaluation_task,
            recommendation_task
        ],
        process=Process.sequential,
        verbose=True
    )

    # Run the crew
    result = learning_crew.kickoff()

    # ... inside the get_learning_recommendations function
    result = learning_crew.kickoff()

# Find the output of the recommendation task
    recommendations_output = None
    for task in learning_crew.tasks:
        if task.description.startswith("Compile a personalized list of learning resources"):
            recommendations_output = task.output
            break

    print(f"Raw recommendations_output: {recommendations_output}") # Keep this for debugging

    structured_recommendations = []
    if recommendations_output:
        try:
            structured_recommendations = json.loads(recommendations_output)
            if not isinstance(structured_recommendations, list):
                print("Warning: Recommendation agent output was not a JSON list.")
                # Fallback to the old parsing logic if needed
                structured_recommendations = []
                resources = recommendations_output.split("\n\n")
                for resource in resources:
                    # ... (your existing parsing logic)
                    pass
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from recommendation agent: {e}")
            # Fallback to the old parsing logic
            structured_recommendations = []
            resources = recommendations_output.split("\n\n")
            for resource in resources:
                # ... (your existing parsing logic)
                pass

    return {"recommendations": structured_recommendations}